FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    python3-dev \
    python3-pip \
    python3-venv \
    wget \
    curl \
    libgl1-mesa-glx \
    libglib2.0-0 \
    ninja-build \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install PyTorch and other dependencies
RUN pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu118
RUN pip3 install gdown tensorboard opencv-python

# Set up working directory
WORKDIR /app

# Copy setup scripts
COPY setup.py .

# Copy requirements.txt if it exists, otherwise create a default one
COPY requirements.txt* ./
RUN if [ ! -f "requirements.txt" ]; then \
    echo "torch>=1.10.0\ntorchvision>=0.11.0\nnumpy>=1.20.0\nopencv-python>=4.5.0\nPillow>=8.0.0\ntqdm>=4.60.0\nmatplotlib>=3.4.0\nscikit-image>=0.18.0\nscipy>=1.7.0\ntensorboard>=2.7.0\ntransformers>=4.15.0\ndiffusers>=0.10.0\naccelerate>=0.12.0\ngdown>=4.4.0\neinops>=0.4.0\ntimm>=0.5.0\nalbumentations>=1.0.0\npytorch-lightning>=1.5.0\nomegaconf>=2.1.0\nhydra-core>=1.1.0" > requirements.txt; \
    fi

# Install Python dependencies
RUN pip3 install -r requirements.txt

# Copy the rest of the application
COPY . .

# Create necessary directories
RUN mkdir -p data/IAM64-new data/IAM64_laplace model_zoo outputs/test

# Download pre-trained models
RUN if [ ! -f "model_zoo/One-DM-ckpt.pt" ]; then \
    gdown --folder https://drive.google.com/drive/folders/1-0JQEfyNPuGKM1kCE-FUwgynhB0r-wP_ -O model_zoo/; \
    fi

RUN if [ ! -f "model_zoo/vae_HTR138.pth" ]; then \
    gdown --folder https://drive.google.com/drive/folders/1-0JQEfyNPuGKM1kCE-FUwgynhB0r-wP_ -O model_zoo/; \
    fi

# Create preprocessing script
RUN echo '#!/bin/bash\n\
echo "Preprocessing training data..."\n\
python preprocess_white_strokes.py --input /app/data/raw_samples --output /app/data/IAM64-new --size 64\n\
echo "Preprocessing complete!"' > /app/preprocess.sh && chmod +x /app/preprocess.sh

# Create entrypoint script
RUN echo '#!/bin/bash\n\
# Run preprocessing if raw samples exist\n\
if [ -d "/app/data/raw_samples" ] && [ "$(ls -A /app/data/raw_samples)" ]; then\n\
  echo "Found raw samples, running preprocessing..."\n\
  /app/preprocess.sh\n\
else\n\
  echo "No raw samples found, skipping preprocessing..."\n\
fi\n\
\n\
# Start training\n\
echo "Starting training..."\n\
exec python train_finetune.py "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"] 